{"meta":{"title":"Zhi-Qiang Zhou blog","subtitle":"Life is Good.","description":"Machine Learnig, Optimization, Fluid Mechacnis, Tsinghua, Beijing","author":"Zhi-Qiang Zhou","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2018-01-17T08:29:31.073Z","updated":"2018-01-17T08:29:31.067Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Zhi-Qiang ZhouPh.D candidateDepartment of Engineering MechanicsTsinghua University email zzq_890709(at)hotmail.com zhouzq14(at)mails.tsinghua.edu.cn","raw":null,"content":null},{"title":"Categories","date":"2018-01-17T08:29:31.077Z","updated":"2018-01-17T08:29:31.072Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"Tags","date":"2018-01-17T08:29:31.090Z","updated":"2018-01-17T08:29:31.081Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"git","slug":"git","date":"2018-01-17T07:14:58.000Z","updated":"2018-01-17T08:40:39.519Z","comments":true,"path":"2018/01/17/git/","link":"","permalink":"http://yoursite.com/2018/01/17/git/","excerpt":"","text":"配置 github 配置你的 github 12git config --global user.name \"Your Name\"git config --global user.email \"youremail@domain.com\" 查看配置信息 1git config --list 创建公钥 1ssh-keygen -C 'you email address@gmail.com' -t rsa 上传公钥在 github.com 的界面中 选择右上角的 Account Settings, 然后选择 SSH Public Keys, 选择新 加. Title 可以随便命名, Key 的内容拷贝自 ~/.ssh/id_rsa.pub 中的内容, 完成后, 可以再使用 1ssh -v git@github.com 进行测试. 看到下面的信息表示验证成功 1Exit status 1 Git 常用命令 远程仓库相关命令 检出仓库: $ git clone git://github.com/jquery/jquery.git 查看远程仓库: $ git remote -v 添加远程仓库: $ git remote add [name] [url] 删除远程仓库: $ git remote rm [name] 修改远程仓库: $ git remote set-url --push [name] [newUrl] 拉取远程仓库: $ git pull [remoteName] [localBranchName] 推送远程仓库: $ git push [remoteName] [localBranchName] *如果想把本地的某个分支 test 提交到远程仓库, 并作为远程仓库的 master 分支, 或者作为另外一个名叫 test 的分支, 如下:$git push origin test:master // 提交本地test分支作为远程的master分支$git push origin test:test // 提交本地test分支作为远程的test分支 分支(branch)操作相关命令 查看本地分支: $ git branch 查看远程分支: $ git branch -r 创建本地分支: $ git branch [name] —-注意新分支创建后不会自动切换为当前分支 切换分支: $ git checkout [name] 创建新分支并立即切换到新分支: $ git checkout -b [name] 删除分支: $ git branch -d [name] —- -d 选项只能删除已经参与了合并的分支, 对于未有合并的分支是无法删除的. - 如果想强制删除一个分支, 可以使用 -D 选项 合并分支: $ git merge [name] —-将名称为 [name] 的分支与当前分支合并 创建远程分支(本地分支 push 到远程): $ git push origin [name] 删除远程分支: $ git push origin :heads/[name] 或 $ gitpush origin :[name] *创建空的分支: (执行命令之前记得先提交你当前分支的修改, 否则会被强制删干净没得后悔)$ git symbolic-ref HEAD refs/heads/[name]$ rm .git/index$ git clean -fdx 版本(tag)操作相关命令 查看版本: $ git tag 创建版本: $ git tag [name] 删除版本: $ git tag -d [name] 查看远程版本: $ git tag -r 创建远程版本(本地版本 push 到远程): $ git push origin [name] 删除远程版本: $ git push origin :refs/tags/[name] 合并远程仓库的 tag 到本地: $ git pull origin --tags 上传本地 tag 到远程仓库: $ git push origin --tags 创建带注释的tag: $ git tag -a [name] -m &#39;yourMessage&#39; 子模块(submodule)相关操作命令 添加子模块: $ git submodule add [url] [path], 如: $git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs 初始化子模块: $ git submodule init —-只在首次检出仓库时运行一次就行 更新子模块: $ git submodule update —-每次更新或切换分支后都需要运行一下 删除子模块: (分4步走哦)(1). $ git rm –cached [path](2). 编辑 .gitmodules 文件, 将子模块的相关配置节点删除掉(3). 编辑 .git/config 文件, 将子模块的相关配置节点删除掉(4). 手动删除子模块残留的目录 忽略一些文件、文件夹不提交在仓库根目录下创建名称为 .gitignore 的文件, 写入不需要的文件夹名或文件, 每个元素占一行即可, 如 target, bin, *,db … Git 命令详解现在我们有了本地和远程的版本库, 让我们来试着用用 Git 的基本命令: git pull: 从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地, 例如: git pull origin master 就是将origin这个版本库的代码更新到本地的 master 主枝, 该功能类似于 SVN 的 update git add: 是将当前更改或者新增的文件加入到Git的索引中, 加入到Git的索引中就表示记入了版本历史中, 这也是提交之前所需要执行的一步, 例如 git add app/model/user.rb 就会增加 app/model/user.rb 文件到 Git 的索引中, 该功能类似于SVN 的 add git rm: 从当前的工作空间中和索引中删除文件, 例如 git rm app/model/user.rb, 该功能类似于 SVN 的 rm、del git commit: 提交当前工作空间的修改内容, 类似于 SVN 的 commit 命令, 例如 git commit -m story #3, add user model, 提交的时候必须用 -m 来输入一条提交信息, 该功能类似于 SVN 的 commit git push: 将本地 commit 的代码更新到远程版本库中, 例如 git push origin 就会将本地的代码更新到名为 orgin 的远程版本库中 git log: 查看历史日志, 该功能类似于SVN的log git revert: 还原一个版本的修改, 必须提供一个具体的 Git 版本号, 例如 git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20, Git 的版本号都是生成的一个哈希值 上面的命令几乎都是每个版本控制工具所公有的, 下面就开始尝试一下Git独有的一些命令: git branch: 对分支的增、删、查等操作, 例如 git branch new_branch 会从当前的工作版本创建一个叫做 new_branch 的新分支, git branch -D new_branch 就会强制删除叫做 new_branch 的分支, git branch 就会列出本地所有的分支 git checkout: Git 的 checkout 有两个作用(1). 一是在不同的 branch 之间进行切换, 例如 git checkout new_branch 就会切换到 new_branch 的分支上去;(2). 另一个功能是还原代码的作用, 例如 git checkout app/model/user.rb 就会将 user.rb 文件从上一个已提交的版本中更新回来, 未提交的内容全部会回滚 git rebase: 用于把一个分支的修改合并到当前分支 git reset: 将当前的工作目录完全回滚到指定的版本号, 假设如下图, 我们有 A-G 五次提交的版本, 其中C的版本号是 [version], 我们执行了 git reset [version] 那么结果就只剩下了 A-C 三个提交的版本 git stash: 将当前未提交的工作存入Git工作栈中, 时机成熟的时候再应用回来, 这里暂时提一下这个命令的用法, 后面在技巧篇会重点讲解 git config: 利用这个命令可以新增、更改Git的各种设置, 例如’git config branch.master.remote origin’就将master的远程版本库设置为别名叫做origin版本库, 后面在技巧篇会利用这个命令个性化设置你的Git, 为你打造独一无二的 Git git tag: 可以将某个具体的版本打上一个标签, 这样你就不需要记忆复杂的版本号哈希值了, 例如你可以使用 git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20 来标记这个被你还原的版本, 那么以后你想查看该版本时, 就可以使用 revert_version 标签名, 而不是哈希值了","raw":null,"content":null,"categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[]},{"title":"My favorite pdes","slug":"pde","date":"2017-12-31T16:00:00.000Z","updated":"2018-01-17T09:26:07.928Z","comments":true,"path":"2018/01/01/pde/","link":"","permalink":"http://yoursite.com/2018/01/01/pde/","excerpt":"","text":"Navier-Stokes equations:$$\\begin{eqnarray*} \\bnabla \\bcdot \\bm{u} &amp;=&amp; 0, \\\\ \\pd{\\bm{u}}{t} + \\bm{u} \\cdot \\bnabla \\bm{u} &amp;=&amp; - \\bnabla p + \\nu \\Delta \\bm{u}. \\end{eqnarray*}$$and Maxwell equations:$$\\begin{eqnarray*} \\bnabla \\bcdot \\bm{E} &amp;=&amp; \\frac{\\rho}{\\epsilon_0}, \\\\ \\bnabla \\bcdot \\bm{B} &amp;=&amp; 0, \\\\ \\bnabla \\times \\bm{E} &amp;=&amp; -\\pd{\\bm{B}}{t}, \\\\ \\bnabla \\times \\bm{B} &amp;=&amp; \\mu_0 \\left( \\bm{J} + \\varepsilon_0 \\pd{\\bm{E}}{t} \\right). \\end{eqnarray*}$$","raw":null,"content":null,"categories":[{"name":"mathematics","slug":"mathematics","permalink":"http://yoursite.com/categories/mathematics/"}],"tags":[]}]}