[{"title":"git","url":"http://yoursite.com/2018/01/17/git/","content":"<h2 id=\"配置-github\"><a href=\"#配置-github\" class=\"headerlink\" title=\"配置 github\"></a>配置 github</h2><ol>\n<li><p>配置你的 github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"youremail@domain.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看配置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -C <span class=\"string\">'you email address@gmail.com'</span> -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传公钥<br>在 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a> 的界面中 选择右上角的 Account Settings, 然后选择 SSH Public Keys, 选择新  加. Title 可以随便命名, Key 的内容拷贝自 <code>~/.ssh/id_rsa.pub</code> 中的内容, 完成后, 可以再使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -v git@github.com</span><br></pre></td></tr></table></figure>\n<p>进行测试. 看到下面的信息表示验证成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exit status 1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h2><ol>\n<li><p>远程仓库相关命令</p>\n<ul>\n<li>检出仓库:         <code>$ git clone git://github.com/jquery/jquery.git</code>  </li>\n<li>查看远程仓库: <code>$ git remote -v</code>  </li>\n<li>添加远程仓库: <code>$ git remote add [name] [url]</code>  </li>\n<li>删除远程仓库: <code>$ git remote rm [name]</code>  </li>\n<li>修改远程仓库: <code>$ git remote set-url --push [name] [newUrl]</code>  </li>\n<li>拉取远程仓库: <code>$ git pull [remoteName] [localBranchName]</code>  </li>\n<li>推送远程仓库: <code>$ git push [remoteName] [localBranchName]</code>  </li>\n<li>*如果想把本地的某个分支 test 提交到远程仓库, 并作为远程仓库的 master 分支, 或者作为另外一个名叫 test 的分支, 如下:<br><code>$git push origin test:master</code>         // 提交本地test分支作为远程的master分支<br><code>$git push origin test:test</code>           // 提交本地test分支作为远程的test分支</li>\n</ul>\n</li>\n<li><p>分支(branch)操作相关命令</p>\n<ul>\n<li>查看本地分支: <code>$ git branch</code></li>\n<li>查看远程分支: <code>$ git branch -r</code></li>\n<li>创建本地分支: <code>$ git branch [name]</code> —-注意新分支创建后不会自动切换为当前分支</li>\n<li>切换分支: <code>$ git checkout [name]</code></li>\n<li>创建新分支并立即切换到新分支: <code>$ git checkout -b [name]</code></li>\n<li>删除分支: <code>$ git branch -d [name]</code> —- <code>-d</code> 选项只能删除已经参与了合并的分支, 对于未有合并的分支是无法删除的. - 如果想强制删除一个分支, 可以使用 <code>-D</code> 选项</li>\n<li>合并分支: <code>$ git merge [name]</code> —-将名称为 <code>[name]</code> 的分支与当前分支合并</li>\n<li>创建远程分支(本地分支 push 到远程): <code>$ git push origin [name]</code></li>\n<li>删除远程分支: <code>$ git push origin :heads/[name]</code> 或 <code>$ gitpush origin :[name]</code></li>\n<li>*创建空的分支: (执行命令之前记得先提交你当前分支的修改, 否则会被强制删干净没得后悔)<br><code>$ git symbolic-ref HEAD refs/heads/[name]</code><br><code>$ rm .git/index</code><br><code>$ git clean -fdx</code></li>\n</ul>\n</li>\n<li><p>版本(tag)操作相关命令</p>\n<ul>\n<li>查看版本: <code>$ git tag</code></li>\n<li>创建版本: <code>$ git tag [name]</code></li>\n<li>删除版本: <code>$ git tag -d [name]</code></li>\n<li>查看远程版本: <code>$ git tag -r</code></li>\n<li>创建远程版本(本地版本 push 到远程): <code>$ git push origin [name]</code></li>\n<li>删除远程版本: <code>$ git push origin :refs/tags/[name]</code></li>\n<li>合并远程仓库的 tag 到本地: <code>$ git pull origin --tags</code></li>\n<li>上传本地 tag 到远程仓库: <code>$ git push origin --tags</code></li>\n<li>创建带注释的tag: <code>$ git tag -a [name] -m &#39;yourMessage&#39;</code></li>\n</ul>\n</li>\n<li><p>子模块(submodule)相关操作命令</p>\n<ul>\n<li>添加子模块: <code>$ git submodule add [url] [path]</code>, 如: <code>$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</code></li>\n<li>初始化子模块: <code>$ git submodule init</code>  —-只在首次检出仓库时运行一次就行</li>\n<li>更新子模块: <code>$ git submodule update</code> —-每次更新或切换分支后都需要运行一下</li>\n<li>删除子模块: (分4步走哦)<br>(1). $ git rm –cached [path]<br>(2). 编辑 <code>.gitmodules</code> 文件, 将子模块的相关配置节点删除掉<br>(3). 编辑 <code>.git/config</code> 文件, 将子模块的相关配置节点删除掉<br>(4). 手动删除子模块残留的目录</li>\n</ul>\n</li>\n<li><p>忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为 <code>.gitignore</code> 的文件, 写入不需要的文件夹名或文件, 每个元素占一行即可, 如 <code>target</code>, <code>bin</code>, <code>*,db</code> …</p>\n</li>\n</ol>\n<h2 id=\"Git-命令详解\"><a href=\"#Git-命令详解\" class=\"headerlink\" title=\"Git 命令详解\"></a>Git 命令详解</h2><p>现在我们有了本地和远程的版本库, 让我们来试着用用 Git 的基本命令: </p>\n<ul>\n<li><code>git pull</code>: 从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地, 例如: <code>git pull origin master</code> 就是将origin这个版本库的代码更新到本地的 master 主枝, 该功能类似于 SVN 的 update</li>\n<li><code>git add</code>: 是将当前更改或者新增的文件加入到Git的索引中, 加入到Git的索引中就表示记入了版本历史中, 这也是提交之前所需要执行的一步, 例如 <code>git add app/model/user.rb</code> 就会增加 <code>app/model/user.rb</code> 文件到 Git 的索引中, 该功能类似于SVN 的 add</li>\n<li><code>git rm</code>: 从当前的工作空间中和索引中删除文件, 例如 <code>git rm app/model/user.rb</code>, 该功能类似于 SVN 的 rm、del</li>\n<li><code>git commit</code>: 提交当前工作空间的修改内容, 类似于 SVN 的 commit 命令, 例如 <code>git commit -m story #3, add user model</code>, 提交的时候必须用 <code>-m</code> 来输入一条提交信息, 该功能类似于 SVN 的 commit</li>\n<li><code>git push</code>: 将本地 commit 的代码更新到远程版本库中, 例如 <code>git push origin</code> 就会将本地的代码更新到名为 <code>orgin</code> 的远程版本库中</li>\n<li><code>git log</code>: 查看历史日志, 该功能类似于SVN的log</li>\n<li><code>git revert</code>: 还原一个版本的修改, 必须提供一个具体的 Git 版本号, 例如 <code>git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20</code>, Git 的版本号都是生成的一个哈希值</li>\n</ul>\n<p>上面的命令几乎都是每个版本控制工具所公有的, 下面就开始尝试一下Git独有的一些命令: </p>\n<ul>\n<li><code>git branch</code>: 对分支的增、删、查等操作, 例如 <code>git branch new_branch</code> 会从当前的工作版本创建一个叫做 <code>new_branch</code> 的新分支, <code>git branch -D new_branch</code> 就会强制删除叫做 <code>new_branch</code> 的分支, <code>git branch</code> 就会列出本地所有的分支</li>\n<li><code>git checkout</code>: Git 的 checkout 有两个作用<br>(1). 一是在不同的 branch 之间进行切换, 例如 <code>git checkout new_branch</code> 就会切换到 <code>new_branch</code> 的分支上去;<br>(2). 另一个功能是还原代码的作用, 例如 <code>git checkout app/model/user.rb</code> 就会将 <code>user.rb</code> 文件从上一个已提交的版本中更新回来, 未提交的内容全部会回滚</li>\n<li><code>git rebase</code>: 用于把一个分支的修改合并到当前分支</li>\n<li><code>git reset</code>: 将当前的工作目录完全回滚到指定的版本号, 假设如下图, 我们有 A-G 五次提交的版本, 其中C的版本号是 <code>[version]</code>, 我们执行了 <code>git reset [version]</code> 那么结果就只剩下了 A-C 三个提交的版本</li>\n<li><code>git stash</code>: 将当前未提交的工作存入Git工作栈中, 时机成熟的时候再应用回来, 这里暂时提一下这个命令的用法, 后面在技巧篇会重点讲解</li>\n<li><code>git config</code>: 利用这个命令可以新增、更改Git的各种设置, 例如’git config branch.master.remote origin’就将master的远程版本库设置为别名叫做origin版本库, 后面在技巧篇会利用这个命令个性化设置你的Git, 为你打造独一无二的 Git</li>\n<li><code>git tag</code>: 可以将某个具体的版本打上一个标签, 这样你就不需要记忆复杂的版本号哈希值了, 例如你可以使用 <code>git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20</code> 来标记这个被你还原的版本, 那么以后你想查看该版本时, 就可以使用 <code>revert_version</code> 标签名, 而不是哈希值了</li>\n</ul>\n"},{"title":"My favorite pdes","url":"http://yoursite.com/2018/01/01/pde/","content":"<p><img src=\"/images/bg.jpg\" alt=\"\"></p>\n<p>Navier-Stokes equations:<br><span>$$\\begin{eqnarray*}\n\\bnabla \\bcdot \\bm{u} &amp;=&amp; 0, \\\\\n\\pd{\\bm{u}}{t} + \\bm{u} \\cdot \\bnabla \\bm{u}\n&amp;=&amp; - \\bnabla p + \\nu \\Delta \\bm{u}.\n\\end{eqnarray*}$$</span><!-- Has MathJax --><br>and Maxwell equations:<br><span>$$\\begin{eqnarray*}\n\\bnabla \\bcdot \\bm{E} &amp;=&amp; \\frac{\\rho}{\\epsilon_0}, \\\\\n\\bnabla \\bcdot \\bm{B} &amp;=&amp; 0, \\\\\n\\bnabla \\times \\bm{E} &amp;=&amp; -\\pd{\\bm{B}}{t}, \\\\\n\\bnabla \\times \\bm{B} &amp;=&amp; \\mu_0 \\left(\n    \\bm{J} + \\varepsilon_0 \\pd{\\bm{E}}{t}\n\\right).\n\\end{eqnarray*}$$</span><!-- Has MathJax --></p>\n"},{"title":"About","url":"http://yoursite.com/about/index.html","content":"<p>Zhi-Qiang Zhou<br>Ph.D candidate<br>Department of Engineering Mechanics<br>Tsinghua University</p>\n<h2 id=\"email\"><a href=\"#email\" class=\"headerlink\" title=\"email\"></a>email</h2><ul>\n<li>zzq_890709(at)hotmail.com</li>\n<li>zhouzq14(at)mails.tsinghua.edu.cn</li>\n</ul>\n"},{"title":"Categories","url":"http://yoursite.com/categories/index.html","content":""},{"title":"Tags","url":"http://yoursite.com/tags/index.html","content":""}]